
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { StoreModule } from '@ngrx/store';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';

import { CourierListComponent } from './courier-list.component';
import { SliderService } from 'app/initiate-event/services/slider.service';
import { InitiatEventDataService } from 'app/initiate-event/shared/initiate-event-data.service';
import { HTTPStatus } from 'app/services/loading-indicator';

describe('CourierListComponent', () => {
  let component: CourierListComponent;
  let fixture: ComponentFixture<CourierListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [CourierListComponent],
      imports: [
        HttpClientTestingModule,
        ReactiveFormsModule,
        StoreModule.forRoot({})
      ],
      providers: [
        FormBuilder,
        HTTPStatus,
        InitiatEventDataService,
        SliderService
      ],
      teardown: { destroyAfterEach: false }
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(CourierListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the CourierListComponent', () => {
    expect(component).toBeTruthy();
  });

  // You can now extend:
  // - test ngOnInit()
  // - test deleteCourier()
  // - test modify/save/cancel actions
});




??_______________

@Test
public void testUpdateCourier() {
    String bnppuid = "test-user";
    String stepName = "Initiate";

    Courier courier = new Courier();
    courier.setId("1");
    courier.setEventId("1");
    courier.setCourierPartnerCategory("Updated Category");

    CourierEntity courierEntity = DpwRepositoryTestHelper.createCourier();

    // Setup mocks
    given(courierRepository.findById(1L)).willReturn(Optional.of(courierEntity));
    given(eventRepository.findById("1")).willReturn(Optional.of(new EventEntity())); // ðŸ”¥ Important
    given(referentialUtil.getUserNameInString(eq(bnppuid), eq(true))).willReturn("Test User");
    given(courierRepository.save(any(CourierEntity.class))).willReturn(courierEntity);

    SideNavCountEntity countEntity = new SideNavCountEntity();
    countEntity.setEventId("1");
    countEntity.setCourierTotalCount(1L);
    countEntity.setCourierActiveCount(1L);
    given(dpwSideNavCountRepository.findByEventId("1")).willReturn(countEntity);

    // Call service
    Courier result = courierService.updateCourier(bnppuid, "1", courier, stepName);

    // Assert
    assertNotNull(result);
    assertEquals("Updated Category", result.getCourierPartnerCategory());
}



--------

@Test
public void testDeleteCourier() {
    // Arrange
    CourierEntity courierEntity = DpwRepositoryTestHelper.createCourier(); // ID is Long
    String courierIdStr = String.valueOf(courierEntity.getId()); // convert to String

    // Prepare InlineResponse200 manually
    InlineResponse200 response = new InlineResponse200();
    response.setMessage("Courier deleted successfully");
    response.setCourierCount("0");

    // Mocks
    given(courierRepository.findById(Long.parseLong(courierIdStr)))
        .willReturn(Optional.of(courierEntity));

    doNothing().when(courierRepository).delete(courierEntity);

    given(dpwSideNavCountRepository.findByEventId(courierEntity.getEventId()))
        .willReturn(new SideNavCountEntity());

    // Act
    InlineResponse200 result = courierService.deleteCourier(
        "bnppuid",
        courierIdStr,
        "Initiate",
        "30004",
        "FR"
    );

    // Assert
    assertThat(result).isNotNull();
    assertThat(result.getMessage()).isEqualTo("Courier deleted successfully");
    assertThat(result.getCourierCount()).isEqualTo("0");
}




,----------------
package com.bnpparibas.dpw.service;

import com.bnpparibas.dpw.converter.DpwDTOConverter;
import com.bnpparibas.dpw.entity.CourierEntity;
import com.bnpparibas.dpw.entity.SideNavCountEntity;
import com.bnpparibas.dpw.model.Courier;
import com.bnpparibas.dpw.model.InlineResponse200;
import com.bnpparibas.dpw.repository.*;
import com.bnpparibas.dpw.helper.DpwRepositoryTestHelper;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;

import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
public class CourierServiceImplTest {

    @InjectMocks
    private CourierServiceImpl courierService;

    @Mock
    private CourierRepository courierRepository;

    @Mock
    private DpwSideNavCountRepository dpwSideNavCountRepository;

    private CourierEntity courierEntity;

    @Before
    public void setup() {
        MockitoAnnotations.openMocks(this);
        courierEntity = DpwRepositoryTestHelper.createCourier();
    }

    @Test
    public void testCreateCourier() {
        Courier courier = DpwDTOConverter.convert(courierEntity, Courier.class);
        SideNavCountEntity countEntity = new SideNavCountEntity();

        given(courierRepository.save(any(CourierEntity.class))).willReturn(courierEntity);
        given(dpwSideNavCountRepository.findByEventId(courier.getEventId())).willReturn(countEntity);

        Courier result = courierService.createCourier(courier, "Initiate");

        Assert.assertNotNull(result);
        Assert.assertEquals("1", result.getEventId());
        Assert.assertEquals("FirstName-LastName", result.getCreatedByUser());
    }

    @Test
    public void testUpdateCourier() {
        Courier courier = DpwDTOConverter.convert(courierEntity, Courier.class);
        courier.setId(courierEntity.getId());

        given(courierRepository.getReferenceById(courier.getId())).willReturn(courierEntity);
        given(courierRepository.save(any(CourierEntity.class))).willReturn(courierEntity);
        given(dpwSideNavCountRepository.findByEventId(courier.getEventId())).willReturn(new SideNavCountEntity());

        Courier result = courierService.updateCourier(courier, "Initiate");

        Assert.assertNotNull(result);
        Assert.assertEquals(courierEntity.getId(), result.getId());
        Assert.assertEquals("1", result.getEventId());
    }

    @Test
    public void testDeleteCourier() {
        String courierId = "1";
        String eventId = "1";
        String stepName = "Initiate";

        given(courierRepository.findById(courierId)).willReturn(Optional.of(courierEntity));
        doNothing().when(courierRepository).deleteById(courierId);
        given(dpwSideNavCountRepository.findByEventId(eventId)).willReturn(new SideNavCountEntity());

        InlineResponse200 result = courierService.deleteCourier(courierId, eventId, stepName);

        Assert.assertNotNull(result);
        Assert.assertEquals("Courier deleted successfully", result.getMessage());
    }
}


-------------------






onCreateCourier(form: Courier) {  // --- COURIER LOGIC START

  const fullName: string =
    getSessionStorageValue('firstName') || getSessionStorageValue('lastName')
      ? getSessionStorageValue('firstName') + ' ' + getSessionStorageValue('lastName')
      : null;

  const courier: Courier = {
    requestId: this.eventId ? null : this.requestId,
    eventId: this.eventId,
    ...form,
    createdBy: this.uid,
    createdByUser: fullName,
    createdOn: new Date()
  };

  this.initiatEventDataService.createCourier(courier, this.instructionSheet.stepName).subscribe((result) => {
    this.instructionSheet['sideNavDetails'] = this.instructionSheet['sideNavDetails'] ?? {};
    this.instructionSheet['sideNavDetails']['courierCount'] = result.courierCount;

    this.courierDetails = {};
    this.activeState[2] = false;

    this.prepareSliderMenu();
    this.sliderService.loadData('Courier');
    this.onStatusUpdate(result, 'courier');
  });
}


----------

updateCourierValue(courier: Courier, index: number) {  // --- COURIER LOGIC START
  this.onAddNew(index);
  this.courierDetails = courier;
}

--------

deleteCourier({ courierId, rowIndex }: { courierId: string; rowIndex: number }) { // --- COURIER LOGIC START
  this.initiatEventDataService.deleteCourier(courierId, this.eventId, this.instructionSheet.stepName).subscribe((isDeleted) => {
    if (isDeleted) {
      this.onStatusUpdate(isDeleted, 'courierDeleted');
      this.sliderService.loadData('Courier');
      this.prepareSliderMenu();
    }
  });
}


-------
case 'courier':
  this.instructionSheet['sideNavDetails']['courierCount'] = record.courierCount;
  break;

case 'courierDeleted':
  this.instructionSheet['sideNavDetails']['courierCount'] = (
    parseInt(this.instructionSheet['sideNavDetails']['courierCount']) - 1
  ).toString();
  break;





-----------


package com.bnpparibas.dpw.service;

import com.bnpparibas.dpw.entity.ExtTrackAndTraceMappingEntity;
import com.bnpparibas.dpw.helpers.CustomComparator;
import com.bnpparibas.dpw.helpers.ScoreCalculator;
import com.bnpparibas.dpw.mapper.CommonMapper;
import com.bnpparibas.dpw.referential.model.ExternalTrackAndTraceMapping;
import com.bnpparibas.dpw.repository.ExtTrackAndTraceMappingRepository;
import com.bnpparibas.dpw.rsql.ParseUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ExtTrackAndTraceMappingServiceImpl implements ExtTrackAndTraceMappingService {

    private final ExtTrackAndTraceMappingRepository extTrackAndTraceMappingRepository;
    private final CommonMapper commonMapper;
    private final ScoreCalculator genericScoreCalculator;

    private static final List<String> fields = List.of(
            "transactionTypeCode",
            "subTransactionTypeCode",
            "productStatusCode",
            "transactionStatusCode"
    );

    @Override
    @Transactional(readOnly = true)
    public ExternalTrackAndTraceMapping getMapping(String query) {
        log.info("[getMapping] RSQL query: {}", query);

        // Parse the RSQL query string
        Specification<ExtTrackAndTraceMappingEntity> specification = ParseUtils.parseQuery(
                query,
                new HashMap<>(),
                ExtTrackAndTraceMappingEntity.class
        );

        List<ExtTrackAndTraceMappingEntity> entities = extTrackAndTraceMappingRepository.findAll(specification);

        if (!entities.isEmpty()) {
            // Extract input values from the RSQL query (for wildcard scoring)
            Map<String, String> paramMap = extractParams(query);
            List<Object> values = fields.stream()
                    .map(paramMap::get)
                    .toList();

            PriorityQueue<ExternalTrackAndTraceMapping> queue =
                    new PriorityQueue<>(new CustomComparator<>(fields, values, genericScoreCalculator));

            queue.addAll(commonMapper.getExtTrackAndTraceMappingModel(entities));
            return queue.peek();
        }

        return null;
    }

    private Map<String, String> extractParams(String rsql) {
        Map<String, String> map = new HashMap<>();
        if (rsql != null && !rsql.isBlank()) {
            String[] conditions = rsql.split(";");
            for (String condition : conditions) {
                String[] parts = condition.split("==");
                if (parts.length == 2) {
                    map.put(parts[0].trim(), parts[1].trim());
                }
            }
        }
        return map;
    }
}
----------------------

package com.bnpparibas.dpw.service.impl;

import com.bnpparibas.dpw.entity.ExtTrackAndTraceMappingEntity;
import com.bnpparibas.dpw.model.ExternalTrackAndTraceMapping;
import com.bnpparibas.dpw.repository.ExtTrackAndTraceMappingRepository;
import com.bnpparibas.dpw.service.ExtTrackAndTraceMappingService;
import com.bnpparibas.dpw.util.CommonMapper;
import com.bnpparibas.dpw.util.CustomComparator;
import com.bnpparibas.dpw.util.ScoreCalculator;
import com.bnpparibas.dpw.util.Specification;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.PriorityQueue;

@Service
public class ExtTrackAndTraceMappingServiceImpl implements ExtTrackAndTraceMappingService {

    @Autowired
    private ExtTrackAndTraceMappingRepository repository;

    @Autowired
    private CommonMapper mapper;

    @Autowired
    private ScoreCalculator scoreCalculator;

    @Override
    public ExternalTrackAndTraceMapping getMapping(String branchCode,
                                                   String countryCode,
                                                   String pgpeCode,
                                                   String action,
                                                   String statusCst,
                                                   String statusCxt,
                                                   String prodCode,
                                                   String transactionTypeCode,
                                                   String subTransactionTypeCode,
                                                   String productStatusCode,
                                                   String transactionStatusCode) {

        // Build base specification with mandatory fields
        Specification<ExtTrackAndTraceMappingEntity> spec =
            Specification.where("branchCode").is(branchCode)
                         .and("countryCode").is(countryCode)
                         .and("pgpeCode").is(pgpeCode)
                         .and("action").is(action)
                         .and("statusCst").is(statusCst);

        // Optional fields
        if (statusCxt != null) {
            spec = spec.and("statusCxt").is(statusCxt);
        }
        if (prodCode != null) {
            spec = spec.and("prodCode").is(prodCode);
        }

        // Wildcard and optional fields
        if (!"*".equals(transactionTypeCode) && transactionTypeCode != null) {
            spec = spec.and("transactionTypeCode").is(transactionTypeCode);
        }
        if (!"*".equals(subTransactionTypeCode) && subTransactionTypeCode != null) {
            spec = spec.and("subTransactionTypeCode").is(subTransactionTypeCode);
        }
        if (!"*".equals(productStatusCode) && productStatusCode != null) {
            spec = spec.and("productStatusCode").is(productStatusCode);
        }
        if (!"*".equals(transactionStatusCode) && transactionStatusCode != null) {
            spec = spec.and("transactionStatusCode").is(transactionStatusCode);
        }

        List<ExtTrackAndTraceMappingEntity> entityList = repository.findAll(spec);

        if (entityList.isEmpty()) {
            return null;
        }

        // Priority logic
        Map<String, String> input = Map.of(
            "transactionTypeCode", transactionTypeCode,
            "subTransactionTypeCode", subTransactionTypeCode,
            "productStatusCode", productStatusCode,
            "transactionStatusCode", transactionStatusCode
        );

        Comparator<ExtTrackAndTraceMappingEntity> comparator = new CustomComparator(scoreCalculator, input);
        PriorityQueue<ExtTrackAndTraceMappingEntity> pq = new PriorityQueue<>(comparator);
        pq.addAll(entityList);

        ExtTrackAndTraceMappingEntity bestMatch = pq.peek();
        return bestMatch != null ? mapper.toExtTrackAndTraceMapping(bestMatch) : null;
    }
}




---------





package com.bnpparibas.dpw.service.impl;

import com.bnpparibas.dpw.entity.ExtTrackAndTraceMappingEntity;
import com.bnpparibas.dpw.mapper.CommonMapper;
import com.bnpparibas.dpw.model.ExternalTrackAndTraceMapping;
import com.bnpparibas.dpw.repository.ExtTrackAndTraceMappingRepository;
import com.bnpparibas.dpw.service.score.CustomComparator;
import com.bnpparibas.dpw.service.score.ScoreCalculator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.data.jpa.domain.Specification;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ExtTrackAndTraceMappingServiceImplTest {

    @InjectMocks
    private ExtTrackAndTraceMappingServiceImpl service;

    @Mock
    private ExtTrackAndTraceMappingRepository repository;

    @Mock
    private CommonMapper commonMapper;

    @Mock
    private ScoreCalculator scoreCalculator;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetMappingReturnsHighestPriorityMatch() {
        // Setup
        ExtTrackAndTraceMappingEntity entity = new ExtTrackAndTraceMappingEntity();
        List<ExtTrackAndTraceMappingEntity> entityList = List.of(entity);

        ExternalTrackAndTraceMapping model = new ExternalTrackAndTraceMapping();
        when(repository.getextMapping(any(), any(), any(), any(), any(), any(), any())).thenReturn(entityList);
        when(commonMapper.getExtTrackAndTraceMappingModel(entityList)).thenReturn(List.of(model));

        // Execute
        ExternalTrackAndTraceMapping result = service.getMapping(
                "30004", "FR", "ILCI", "Validated", "Active", null,
                null, "T1", "ST1", "P1", "TS1"
        );

        // Verify
        assertNotNull(result);
        verify(repository).getextMapping("30004", "FR", "ILCI", "Validated", "Active", null, null);
    }

    @Test
    void testGetMappingReturnsNullWhenEmptyList() {
        when(repository.getextMapping(any(), any(), any(), any(), any(), any(), any())).thenReturn(Collections.emptyList());

        ExternalTrackAndTraceMapping result = service.getMapping(
                "30004", "FR", "ILCI", "Validated", "Active", null,
                null, "T1", "ST1", "P1", "TS1"
        );

        assertNull(result);
    }
}





+++++-----------&&&&&&&&&&&&-----------

// issue-policy.component.ts
import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PolicyService } from '../policy.service';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  userId = 1; // replace with actual user ID
  step = 1;
  personalForm!: FormGroup;
  incomeForm!: FormGroup;
  nomineeForm!: FormGroup;
  policyForm!: FormGroup;

  constructor(private fb: FormBuilder, private policyService: PolicyService) {}

  ngOnInit(): void {
    this.personalForm = this.fb.group({
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]
    });

    this.incomeForm = this.fb.group({
      incomeSource: ['', Validators.required],
      totalIncome: ['', [Validators.required, Validators.min(0)]]
    });

    this.nomineeForm = this.fb.group({
      nominees: this.fb.array([this.createNomineeGroup()])
    });

    this.policyForm = this.fb.group({
      planType: ['', Validators.required],
      tenure: ['', Validators.required],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', [Validators.required, Validators.min(0)]],
      issuanceDate: ['', Validators.required]
    });
  }

  get nomineeFormArray() {
    return this.nomineeForm.get('nominees') as FormArray;
  }

  createNomineeGroup(): FormGroup {
    return this.fb.group({
      nomineeName: ['', Validators.required],
      contactNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]],
      dob: ['', Validators.required],
      relationship: ['', Validators.required],
      percentageStake: ['', [Validators.required, Validators.min(0), Validators.max(100)]]
    });
  }

  addNominee(): void {
    this.nomineeFormArray.push(this.createNomineeGroup());
  }

  removeNominee(index: number): void {
    if (this.nomineeFormArray.length > 1) {
      this.nomineeFormArray.removeAt(index);
    }
  }

  nextStep(): void {
    if (this.step === 1 && this.personalForm.valid) this.step++;
    else if (this.step === 2 && this.incomeForm.valid) this.step++;
    else if (this.step === 3 && this.nomineeForm.valid) this.step++;
  }

  prevStep(): void {
    if (this.step > 1) this.step--;
  }

  submitPolicy(): void {
    if (this.personalForm.invalid || this.incomeForm.invalid || this.nomineeForm.invalid || this.policyForm.invalid) {
      alert('Please fill all required fields.');
      return;
    }

    const policyFormValue = this.policyForm.value;
    const insuredAmount = policyFormValue.insuredAmount;
    const tenure = policyFormValue.tenure;
    const issuanceDate = new Date(policyFormValue.issuanceDate);
    const maturityDate = new Date(issuanceDate);
    maturityDate.setFullYear(issuanceDate.getFullYear() + Number(tenure));

    const policyData = {
      ...this.personalForm.value,
      ...this.incomeForm.value,
      ...this.policyForm.value,
      nominees: this.nomineeFormArray.value,
      maturityDate: maturityDate.toISOString().split('T')[0],
      premiumAmount: insuredAmount * 0.02,
      maturityAmount: insuredAmount * 1.5,
      policyStatus: 'Issued'
    };

    this.policyService.issuePolicy(this.userId, policyData).subscribe(
      response => {
        alert('Policy Issued Successfully');
        this.personalForm.reset();
        this.incomeForm.reset();
        this.policyForm.reset();
        this.nomineeFormArray.clear();
        this.nomineeFormArray.push(this.createNomineeGroup());
        this.step = 1;
      },
      error => alert('Error issuing policy')
    );
  }
}


// issue-policy.component.html
<div class="form-container">
  <form (ngSubmit)="submitPolicy()">
    <div *ngIf="step === 1">
      <h3>Step 1: Personal Details</h3>
      <input type="text" placeholder="Policy Holder Name" formControlName="policyHolderName" [formGroup]="personalForm">
      <input type="date" placeholder="DOB" formControlName="dob" [formGroup]="personalForm">
      <input type="text" placeholder="Address" formControlName="address" [formGroup]="personalForm">
      <input type="text" placeholder="Mobile Number" formControlName="mobileNumber" [formGroup]="personalForm">
    </div>

    <div *ngIf="step === 2">
      <h3>Step 2: Income Details</h3>
      <input type="text" placeholder="Income Source" formControlName="incomeSource" [formGroup]="incomeForm">
      <input type="number" placeholder="Total Income" formControlName="totalIncome" [formGroup]="incomeForm">
    </div>

    <div *ngIf="step === 3">
      <h3>Step 3: Nominee Details</h3>
      <div formArrayName="nominees" [formGroup]="nomineeForm">
        <div *ngFor="let nominee of nomineeFormArray.controls; let i = index" [formGroupName]="i">
          <input type="text" placeholder="Nominee Name" formControlName="nomineeName">
          <input type="text" placeholder="Contact Number" formControlName="contactNumber">
          <input type="date" placeholder="DOB" formControlName="dob">
          <input type="text" placeholder="Relationship" formControlName="relationship">
          <input type="number" placeholder="% Stake" formControlName="percentageStake">
          <button type="button" (click)="removeNominee(i)">Remove</button>
        </div>
        <button type="button" (click)="addNominee()">Add Nominee</button>
      </div>
    </div>

    <div *ngIf="step === 4">
      <h3>Step 4: Policy Details</h3>
      <input type="text" placeholder="Plan Type" formControlName="planType" [formGroup]="policyForm">
      <input type="number" placeholder="Tenure (Years)" formControlName="tenure" [formGroup]="policyForm">
      <input type="text" placeholder="Premium Frequency" formControlName="premiumFrequency" [formGroup]="policyForm">
      <input type="number" placeholder="Insured Amount" formControlName="insuredAmount" [formGroup]="policyForm">
      <input type="date" placeholder="Issuance Date" formControlName="issuanceDate" [formGroup]="policyForm">
    </div>

    <div class="button-row">
      <button type="button" (click)="prevStep()" [disabled]="step === 1">Previous</button>
      <button type="button" (click)="nextStep()" *ngIf="step < 4">Next</button>
      <button type="submit" *ngIf="step === 4">Submit</button>
    </div>
  </form>
</div>


/* issue-policy.component.css */
.form-container {
  max-width: 700px;
  margin: 2rem auto;
  padding: 2rem;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #f9f9f9;
}

input, button {
  display: block;
  width: 100%;
  padding: 0.5rem;
  margin: 0.5rem 0;
  font-size: 1rem;
}

.button-row {
  display: flex;
  justify-content: space-between;
  margin-top: 1rem;
}

button[type="submit"] {
  background-color: #4CAF50;
  color: white;
  font-weight: bold;
  border: none;
  cursor: pointer;
}

button:hover {
  opacity: 0.9;
}

_____________________________________________________________
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClaimService } from '../services/claim.service';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-apply-claim',
  templateUrl: './apply-claim.component.html',
  styleUrls: ['./apply-claim.component.css']
})
export class ApplyClaimComponent implements OnInit {
  claimForm: FormGroup;
  policyId: number;
  errorMessage: string = '';

  constructor(
    private fb: FormBuilder,
    private claimService: ClaimService,
    private route: ActivatedRoute,
    private router: Router
  ) {
    this.claimForm = this.fb.group({
      claimAmount: ['', [Validators.required, Validators.min(1000)]],
      claimType: ['', Validators.required],
      claimDocuments: ['', Validators.required]
    });

    this.policyId = Number(this.route.snapshot.paramMap.get('policyId'));
  }

  ngOnInit(): void {}

  onSubmit(): void {
    if (this.claimForm.invalid) {
      return;
    }

    this.claimService.applyClaim(this.policyId, this.claimForm.value).subscribe(
      () => {
        alert('Claim submitted successfully');
        this.router.navigate(['/dashboard']);
      },
      error => {
        console.error('Error applying claim:', error);
        this.errorMessage = 'Failed to submit claim. Try again later.';
      }
    );
  }
}
_______applyclaim.component.ts_____________________


apply-claim.component.html

<div class="claim-container">
  <h2>Apply for Claim</h2>
  <form [formGroup]="claimForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label>Claim Amount:</label>
      <input type="number" formControlName="claimAmount" class="form-control" />
      <span *ngIf="claimForm.controls['claimAmount'].invalid && claimForm.controls['claimAmount'].touched">
        Claim amount must be at least 1000.
      </span>
    </div>

    <div class="form-group">
      <label>Claim Type:</label>
      <select formControlName="claimType" class="form-control">
        <option value="">Select Type</option>
        <option value="Medical">Medical</option>
        <option value="Accident">Accident</option>
        <option value="Property">Property</option>
      </select>
    </div>

    <div class="form-group">
      <label>Claim Documents:</label>
      <input type="file" formControlName="claimDocuments" class="form-control" />
    </div>

    <button type="submit" [disabled]="claimForm.invalid" class="btn btn-primary">Submit Claim</button>
  </form>
</div>
__________________________

apply-claim.component.css
.claim-container {
  width: 50%;
  margin: auto;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}
.form-group {
  margin-bottom: 15px;
}
.form-control {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
}
.btn-primary {
  background-color: #007bff;
  color: white;
  padding: 10px;
  border: none;
  cursor: pointer;
}
_____________________________________________________


claim.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Claim } from '../models/claim.model';

@Injectable({
  providedIn: 'root'
})
export class ClaimService {
  private apiUrl = 'http://localhost:8080/claims';

  constructor(private http: HttpClient) {}

  applyClaim(policyId: number, claim: Claim): Observable<Claim> {
    return this.http.post<Claim>(`${this.apiUrl}/apply/${policyId}`, claim);
  }

  getUserClaims(userId: number): Observable<Claim[]> {
    return this.http.get<Claim[]>(`${this.apiUrl}/user/${userId}`);
  }

  getClaimsForApproval(): Observable<Claim[]> {
    return this.http.get<Claim[]>(`${this.apiUrl}/pending`);
  }

  approveClaim(claimId: number): Observable<Claim> {
    return this.http.put<Claim>(`${this.apiUrl}/approve/${claimId}`, {});
  }

  rejectClaim(claimId: number): Observable<Claim> {
    return this.http.put<Claim>(`${this.apiUrl}/reject/${claimId}`, {});
  }
}
_________________________________________

claim.model.ts

export interface Claim {
  id?: number;
  policyId: number;
  claimAmount: number;
  claimType: string;
  claimDocuments: string;
  status?: string;
}
___________________________________________________



claim-approval.component.ts

import { Component, OnInit } from '@angular/core';
import { ClaimService } from '../services/claim.service';

@Component({
  selector: 'app-claim-approval',
  templateUrl: './claim-approval.component.html',
  styleUrls: ['./claim-approval.component.css']
})
export class ClaimApprovalComponent implements OnInit {
  claims: any[] = [];

  constructor(private claimService: ClaimService) {}

  ngOnInit(): void {
    this.claimService.getClaimsForApproval().subscribe(data => {
      this.claims = data;
    });
  }

  approveClaim(id: number) {
    this.claimService.approveClaim(id).subscribe(() => {
      this.claims = this.claims.filter(claim => claim.id !== id);
    });
  }

  rejectClaim(id: number) {
    this.claimService.rejectClaim(id).subscribe(() => {
      this.claims = this.claims.filter(claim => claim.id !== id);
    });
  }
}
____________________________________________________


claim-approval.component.html

<div class="approval-container">
  <h2>Claim Approval</h2>
  <table>
    <tr>
      <th>Claim ID</th>
      <th>Policy ID</th>
      <th>Claim Amount</th>
      <th>Claim Type</th>
      <th>Status</th>
      <th>Actions</th>
    </tr>
    <tr *ngFor="let claim of claims">
      <td>{{ claim.id }}</td>
      <td>{{ claim.policyId }}</td>
      <td>{{ claim.claimAmount }}</td>
      <td>{{ claim.claimType }}</td>
      <td>{{ claim.status }}</td>
      <td>
        <button (click)="approveClaim(claim.id)">Approve</button>
        <button (click)="rejectClaim(claim.id)">Reject</button>
      </td>
    </tr>
  </table>
</div>
____________________________________________

 profile.component.ts

import { Component, OnInit } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { PolicyService } from '../services/policy.service';
import { ClaimService } from '../services/claim.service';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']
})
export class ProfileComponent implements OnInit {
  user: any;
  policies: any[] = [];
  claims: any[] = [];

  constructor(
    private authService: AuthService,
    private policyService: PolicyService,
    private claimService: ClaimService
  ) {}

  ngOnInit(): void {
    this.loadUserProfile();
  }

  loadUserProfile() {
    this.user = this.authService.getLoggedInUser();
    if (this.user) {
      this.fetchPolicies();
      this.fetchClaims();
    }
  }

  fetchPolicies() {
    this.policyService.getPoliciesByUserId(this.user.id).subscribe(
      (data) => {
        this.policies = data;
      },
      (error) => {
        console.error('Error fetching policies', error);
      }
    );
  }

  fetchClaims() {
    this.claimService.getClaimsByUserId(this.user.id).subscribe(
      (data) => {
        this.claims = data;
      },
      (error) => {
        console.error('Error fetching claims', error);
      }
    );
  }
}
___________________


<div class="profile-container">
  <h2>User Profile</h2>
  
  <div class="user-details">
    <p><strong>Username:</strong> {{ user?.username }}</p>
    <p><strong>Email:</strong> {{ user?.email }}</p>
  </div>

  <h3>Issued Policies</h3>
  <table>
    <thead>
      <tr>
        <th>Plan Type</th>
        <th>Tenure</th>
        <th>Premium Frequency</th>
        <th>Insured Amount</th>
        <th>Issuance Date</th>
        <th>Maturity Date</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let policy of policies">
        <td>{{ policy.planType }}</td>
        <td>{{ policy.tenure }}</td>
        <td>{{ policy.premiumFrequency }}</td>
        <td>{{ policy.insuredAmount }}</td>
        <td>{{ policy.issuanceDate }}</td>
        <td>{{ policy.maturityDate }}</td>
      </tr>
    </tbody>
  </table>

  <h3>Claims</h3>
  <table>
    <thead>
      <tr>
        <th>Claim Amount</th>
        <th>Claim Type</th>
        <th>Claim Documents</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let claim of claims">
        <td>{{ claim.claimAmount }}</td>
        <td>{{ claim.claimType }}</td>
        <td>{{ claim.claimDocuments }}</td>
        <td [ngClass]="{
          'pending': claim.status === 'PENDING',
          'approved': claim.status === 'APPROVED',
          'rejected': claim.status === 'REJECTED'
        }">
          {{ claim.status }}
        </td>
      </tr>
    </tbody>
  </table>
</div>


profile.component.html

______________________________

profile.component.css


.profile-container {
  max-width: 800px;
  margin: auto;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0px 0px 10px rgba(0,0,0,0.1);
}

h2, h3 {
  text-align: center;
}

.user-details p {
  font-size: 18px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
}

th, td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: center;
}

.pending {
  color: orange;
  font-weight: bold;
}

.approved {
  color: green;
  font-weight: bold;
}

.rejected {
  color: red;
  font-weight: bold;
}
____________________________

Policy Service (policy.service.ts)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class PolicyService {
  private apiUrl = 'http://localhost:8080/policies';

  constructor(private http: HttpClient) {}

  getPoliciesByUserId(userId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/user/${userId}`);
  }
}

---------------------------------
Claim Service (claim.service.ts)
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ClaimService {
  private apiUrl = 'http://localhost:8080/claims';

  constructor(private http: HttpClient) {}

  getClaimsByUserId(userId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/user/${userId}`);
  }
}
-----------------------------------------
AuthService (auth.service.ts)

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  getLoggedInUser() {
    return JSON.parse(localStorage.getItem('user') || '{}');
  }
}
______________________________________________

dashboard.html

<div class="dashboard-container">
  <h2>Welcome to BNP</h2>

  <div class="menu">
    <button routerLink="/issuepolicy">Issue Policy</button>
    <button routerLink="/applyclaim">Apply Claim</button>
    <button *ngIf="userRole === 'ADMIN'" routerLink="/approveclaim">Approve Claim</button>
    <button class="profile-btn" (click)="navigateToProfile()">View Profile</button>
    <button class="logout-btn" (click)="logout()">Logout</button>
  </div>
</div>
___________________________________________
dashboard.component.ts


import { Component, OnInit } from "@angular/core";
import { Router } from "@angular/router";

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  userRole: string | null = '';

  constructor(private router: Router) {}

  ngOnInit(): void {
    this.userRole = localStorage.getItem('userRole');
  }

  navigateToProfile(): void {
    this.router.navigate(['/profile']);
  }

  logout(): void {
    localStorage.clear();
    this.router.navigate(['/login']);
  }
}

------------------------------------------

dashboard.component.css

.dashboard-container {
  text-align: center;
  padding: 20px;
}

.menu {
  margin-top: 20px;
}

button {
  margin: 10px;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.profile-btn {
  background-color: #007bff;
  color: white;
}

.logout-btn {
  background-color: #dc3545;
  color: white;
}

____________________________________________________________________________
// This Angular structure represents the Issue Policy functionality with 4-step form and backend integration
// Folder structure
// â”œâ”€â”€ issue-policy
// â”‚   â”œâ”€â”€ issue-policy.component.ts
// â”‚   â”œâ”€â”€ issue-policy.component.html
// â”‚   â”œâ”€â”€ issue-policy.component.css
// â”‚   â”œâ”€â”€ policy.service.ts
// â”‚   â”œâ”€â”€ personal-details.component.ts
// â”‚   â”œâ”€â”€ income-details.component.ts
// â”‚   â”œâ”€â”€ nominee-details.component.ts
// â”‚   â”œâ”€â”€ policy-details.component.ts

// issue-policy.component.ts
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PolicyService } from './policy.service';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent {
  step = 1;
  personalForm!: FormGroup;
  incomeForm!: FormGroup;
  nomineeFormArray: FormGroup[] = [];
  policyForm!: FormGroup;
  userId = 1; // Replace with session data after login integration

  constructor(private fb: FormBuilder, private policyService: PolicyService) {
    this.initForms();
  }

  initForms() {
    this.personalForm = this.fb.group({
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', [Validators.required, Validators.pattern(/^[0-9]{10}$/)]],
    });

    this.incomeForm = this.fb.group({
      incomeSource: ['', Validators.required],
      totalIncome: [null, [Validators.required, Validators.min(0)]],
    });

    this.policyForm = this.fb.group({
      planType: ['', Validators.required],
      tenure: [null, Validators.required],
      premiumFrequency: ['', Validators.required],
      insuredAmount: [null, Validators.required],
      issuanceDate: ['', Validators.required],
    });
  }

  addNominee() {
    const nomineeForm = this.fb.group({
      nomineeName: ['', Validators.required],
      contactNumber: ['', Validators.required],
      dob: ['', Validators.required],
      relationship: ['', Validators.required],
      percentageStake: [null, Validators.required],
    });
    this.nomineeFormArray.push(nomineeForm);
  }

  next() {
    if (this.step < 4) this.step++;
  }

  prev() {
    if (this.step > 1) this.step--;
  }

  submitPolicy() {
    if (
      this.personalForm.invalid ||
      this.incomeForm.invalid ||
      this.policyForm.invalid ||
      this.nomineeFormArray.some(form => form.invalid)
    ) {
      alert('Please fill all fields correctly.');
      return;
    }

    const policyData = {
      ...this.personalForm.value,
      ...this.incomeForm.value,
      ...this.policyForm.value,
      nominees: this.nomineeFormArray.map(f => f.value),
    };

    // Dummy formula
    const issuanceDate = new Date(policyData.issuanceDate);
    const maturityDate = new Date(issuanceDate);
    maturityDate.setFullYear(maturityDate.getFullYear() + Number(policyData.tenure));
    policyData.maturityDate = maturityDate;
    policyData.premiumAmount = policyData.insuredAmount * 0.02;
    policyData.maturityAmount = policyData.insuredAmount * 1.5;
    policyData.policyStatus = 'Issued';

    this.policyService.issuePolicy(this.userId, policyData).subscribe(
      res => alert('Policy Issued Successfully'),
      err => alert('Error issuing policy')
    );
  }
}

// policy.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class PolicyService {
  private baseUrl = 'http://localhost:8080/policy';

  constructor(private http: HttpClient) {}

  issuePolicy(userId: number, policyData: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/issue/${userId}`, policyData);
  }

  getPolicies(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/`);
  }
}

// issue-policy.component.html
<!-- Add attractive CSS and PrimeNG steps here with proper input validation messages -->
<div class="step-container">
  <ng-container *ngIf="step === 1">
    <h3>Step 1: Personal Details</h3>
    <!-- Inputs from personalForm -->
  </ng-container>

  <ng-container *ngIf="step === 2">
    <h3>Step 2: Income Details</h3>
    <!-- Inputs from incomeForm -->
  </ng-container>

  <ng-container *ngIf="step === 3">
    <h3>Step 3: Nominee Details</h3>
    <div *ngFor="let form of nomineeFormArray; let i = index">
      <!-- Nominee input fields here -->
    </div>
    <button (click)="addNominee()">Add Nominee</button>
  </ng-container>

  <ng-container *ngIf="step === 4">
    <h3>Step 4: Policy Details</h3>
    <!-- Inputs from policyForm -->
  </ng-container>

  <div class="nav-buttons">
    <button (click)="prev()" [disabled]="step === 1">Previous</button>
    <button *ngIf="step < 4" (click)="next()">Next</button>
    <button *ngIf="step === 4" (click)="submitPolicy()">Submit</button>
  </div>
</div>

// Add styling in issue-policy.component.css
.step-container {
  padding: 2rem;
  background: #fff;
  border-radius: 1rem;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  max-width: 700px;
  margin: auto;
}

.nav-buttons button {
  margin-right: 10px;
}

input.ng-invalid.ng-touched {
  border-color: red;
}
_______________________________________________________________________

@RestController
@RequestMapping("/nominees")
@CrossOrigin(origins = "http://localhost:4200")
public class NomineeController {

    private final NomineeService nomineeService;

    public NomineeController(NomineeService nomineeService) {
        this.nomineeService = nomineeService;
    }

    @PostMapping("/add")
    public ResponseEntity<Nominee> addNominee(@RequestBody Nominee nominee) {
        return ResponseEntity.ok(nomineeService.addNominee(nominee));
    }

    @GetMapping("/policy/{policyId}")
    public ResponseEntity<List<Nominee>> getNomineesByPolicy(@PathVariable Long policyId) {
        return ResponseEntity.ok(nomineeService.getNomineesByPolicy(policyId));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteNominee(@PathVariable Long id) {
        nomineeService.deleteNominee(id);
        return ResponseEntity.ok().build();
    }
}
___________________________________________

@Transactional
public Policy issuePolicy(Long userId, Policy policy) {
    User user = userRepository.findById(userId)
        .orElseThrow(() -> new RuntimeException("User not found"));

    policy.setUser(user);
    // Calculate maturity date, amount, etc. here

    Policy savedPolicy = policyRepository.save(policy);

    for (Nominee nominee : policy.getNominees()) {
        nominee.setPolicy(savedPolicy);
        nomineeRepository.save(nominee);
    }

    return savedPolicy;
}
__________________________________________________________

// personal-details.component.ts
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'app-personal-details',
  template: `
    <div [formGroup]="formGroup">
      <label>Policy Holder Name</label>
      <input formControlName="policyHolderName" />

      <label>DOB</label>
      <input type="date" formControlName="dob" />

      <label>Address</label>
      <input formControlName="address" />

      <label>Mobile Number</label>
      <input formControlName="mobileNumber" />
    </div>
  `
})
export class PersonalDetailsComponent {
  @Input() formGroup!: FormGroup;
}

// income-details.component.ts
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'app-income-details',
  template: `
    <div [formGroup]="formGroup">
      <label>Income Source</label>
      <input formControlName="incomeSource" />

      <label>Total Income</label>
      <input type="number" formControlName="totalIncome" />
    </div>
  `
})
export class IncomeDetailsComponent {
  @Input() formGroup!: FormGroup;
}

// nominee-details.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'app-nominee-details',
  template: `
    <div *ngFor="let form of nomineeFormArray; let i = index" [formGroup]="form">
      <label>Nominee Name</label>
      <input formControlName="nomineeName" />

      <label>Contact Number</label>
      <input formControlName="contactNumber" />

      <label>DOB</label>
      <input type="date" formControlName="dob" />

      <label>Relationship</label>
      <input formControlName="relationship" />

      <label>Percentage Stake</label>
      <input type="number" formControlName="percentageStake" />
    </div>
    <button (click)="addNominee.emit()">Add Nominee</button>
  `
})
export class NomineeDetailsComponent {
  @Input() nomineeFormArray!: FormGroup[];
  @Output() addNominee = new EventEmitter<void>();
}

// policy-details.component.ts
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'app-policy-details',
  template: `
    <div [formGroup]="formGroup">
      <label>Plan Type</label>
      <input formControlName="planType" />

      <label>Tenure</label>
      <input type="number" formControlName="tenure" />

      <label>Premium Frequency</label>
      <input formControlName="premiumFrequency" />

      <label>Insured Amount</label>
      <input type="number" formControlName="insuredAmount" />

      <label>Issuance Date</label>
      <input type="date" formControlName="issuanceDate" />
    </div>
  `
})
export class PolicyDetailsComponent {
  @Input() formGroup!: FormGroup;
}





