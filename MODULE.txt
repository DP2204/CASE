import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PolicyService } from '../services/policy.service';
import { Router } from '@angular/router';

type Frequency = 'Monthly' | 'Quarterly' | 'Half-Yearly' | 'Yearly';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  step = 0;
  form: FormGroup;
  userId = localStorage.getItem('userId') || '1';

  planTypes = ['Term_Life', 'Health_Insaurance', 'Endowment'];
  frequencies: Frequency[] = ['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'];

  constructor(
    private fb: FormBuilder,
    private policyService: PolicyService,
    private router: Router
  ) {
    this.form = this.fb.group({
      // Step 0: Personal
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', [Validators.required, Validators.pattern(/^\d{10}$/)]],

      // Step 1: Income
      incomeSource: ['', Validators.required],
      totalIncome: ['', [Validators.required, Validators.min(1)]],

      // Step 2: Single Nominee
      nomineeName: ['', Validators.required],
      nomineeContactNumber: ['', [Validators.required, Validators.pattern(/^\d{10}$/)]],
      nomineeDOB: ['', Validators.required],
      nomineeRelationship: ['', Validators.required],
      nomineePercentageStake: ['', [Validators.required, Validators.min(1), Validators.max(100)]],

      // Step 3: Policy
      planType: ['', Validators.required],
      tenure: ['', [Validators.required, Validators.min(1)]],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', [Validators.required, Validators.min(1)]],
      issuanceDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {}

  nextStep() {
    const fieldsPerStep = [
      ['policyHolderName', 'dob', 'address', 'mobileNumber'],
      ['incomeSource', 'totalIncome'],
      ['nomineeName', 'nomineeContactNumber', 'nomineeDOB', 'nomineeRelationship', 'nomineePercentageStake'],
      ['planType', 'tenure', 'premiumFrequency', 'insuredAmount', 'issuanceDate']
    ];

    const currentFields = fieldsPerStep[this.step];
    let valid = true;

    currentFields.forEach(control => {
      const ctrl = this.form.get(control);
      if (ctrl && ctrl.invalid) {
        ctrl.markAsTouched();
        valid = false;
      }
    });

    if (!valid) return;

    if (this.step < 3) {
      this.step++;
    } else {
      this.submitForm();
    }
  }

  previousStep() {
    if (this.step > 0) this.step--;
  }

  submitForm() {
    const formValue = this.form.value;

    const policyData = {
      ...formValue,
      policyStatus: 'ACTIVE',
      maturityDate: this.calculateMaturityDate(formValue.issuanceDate, formValue.tenure),
      premiumAmount: this.calculatePremium(+formValue.insuredAmount, formValue.premiumFrequency),
      maturityAmount: this.calculateMaturityAmount(+formValue.insuredAmount, formValue.planType, +formValue.tenure)
    };

    console.log('Submitting policyData:', policyData);

    this.policyService.issuePolicy(Number(this.userId), policyData).subscribe(() => {
      alert('Policy Issued Successfully');
      this.router.navigate(['/']);
    });
  }

  calculateMaturityDate(startDate: string, tenure: number): string {
    const date = new Date(startDate);
    date.setFullYear(date.getFullYear() + Number(tenure));
    return date.toISOString().split('T')[0];
  }

  calculatePremium(amount: number, frequency: Frequency): number {
    const frequencyDivisor: Record<Frequency, number> = {
      Monthly: 12,
      Quarterly: 4,
      'Half-Yearly': 2,
      Yearly: 1
    };
    return +(amount / frequencyDivisor[frequency]).toFixed(2);
  }

  calculateMaturityAmount(amount: number, planType: string, tenure: number): number {
    const factor = planType === 'Endowment' ? 1.5 : 1.2;
    return +(amount * factor * tenure).toFixed(2);
  }
}

------------------------------------------------------------------------------------------------------------------------
<div class="container">
  <h2>Issue Policy - Step {{ step + 1 }}/4</h2>

  <form [formGroup]="form">
    <div *ngIf="step === 0">
      <h3>Personal Details</h3>
      <input type="text" formControlName="policyHolderName" placeholder="Full Name">
      <input type="date" formControlName="dob" placeholder="Date of Birth">
      <input type="text" formControlName="address" placeholder="Address">
      <input type="text" formControlName="mobileNumber" placeholder="Mobile Number">
    </div>

    <div *ngIf="step === 1">
      <h3>Income Details</h3>
      <input type="text" formControlName="incomeSource" placeholder="Income Source">
      <input type="number" formControlName="totalIncome" placeholder="Total Income">
    </div>

    <div *ngIf="step === 2">
      <h3>Nominee Details</h3>
      <input type="text" formControlName="nomineeName" placeholder="Name">
      <input type="text" formControlName="nomineeContactNumber" placeholder="Contact No">
      <input type="date" formControlName="nomineeDOB" placeholder="DOB">
      <input type="text" formControlName="nomineeRelationship" placeholder="Relationship">
      <input type="number" formControlName="nomineePercentageStake" placeholder="Stake (%)">
    </div>

    <div *ngIf="step === 3">
      <h3>Policy Details</h3>
      <select formControlName="planType">
        <option value="">Select Plan</option>
        <option *ngFor="let type of planTypes" [value]="type">{{ type }}</option>
      </select>
      <input type="number" formControlName="tenure" placeholder="Tenure (years)">
      <select formControlName="premiumFrequency">
        <option value="">Frequency</option>
        <option *ngFor="let f of frequencies" [value]="f">{{ f }}</option>
      </select>
      <input type="number" formControlName="insuredAmount" placeholder="Insured Amount">
      <input type="date" formControlName="issuanceDate" placeholder="Issuance Date">
    </div>

    <div class="navigation-buttons">
      <button type="button" (click)="previousStep()" *ngIf="step > 0">Previous</button>
      <button type="button" (click)="nextStep()">{{ step < 3 ? 'Next' : 'Submit' }}</button>
    </div>
  </form>
</div>
===============================================================================================================
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { PolicyService } from '../services/policy.service';
import { Router } from '@angular/router';

type Frequency = 'Monthly' | 'Quarterly' | 'Half-Yearly' | 'Yearly';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  step = 0;
  form: FormGroup;
  userId = localStorage.getItem('userId') || '1';

  planTypes = ['BASIC', 'PREMIUM'];
  frequencies: Frequency[] = ['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'];

  constructor(
    private fb: FormBuilder,
    private policyService: PolicyService,
    private router: Router
  ) {
    this.form = this.fb.group({
      // Step 0: Personal
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', [Validators.required, Validators.pattern(/^\d{10}$/)]],

      // Step 1: Income
      incomeSource: ['', Validators.required],
      totalIncome: ['', [Validators.required, Validators.min(1)]],

      // Step 2: Nominees
      nominees: this.fb.array([]),

      // Step 3: Policy
      planType: ['', Validators.required],
      tenure: ['', [Validators.required, Validators.min(1)]],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', [Validators.required, Validators.min(1)]],
      issuanceDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.addNominee();
  }

  get nominees(): FormArray {
    return this.form.get('nominees') as FormArray;
  }

  addNominee() {
    this.nominees.push(
      this.fb.group({
        nomineeName: ['', Validators.required],
        contactNumber: ['', [Validators.required, Validators.pattern(/^\d{10}$/)]],
        dob: ['', Validators.required],
        relationship: ['', Validators.required],
        percentageStake: ['', [Validators.required, Validators.min(1), Validators.max(100)]]
      })
    );
  }

  nextStep() {
    let controlsToCheck: string[] = [];

    switch (this.step) {
      case 0:
        controlsToCheck = ['policyHolderName', 'dob', 'address', 'mobileNumber'];
        break;
      case 1:
        controlsToCheck = ['incomeSource', 'totalIncome'];
        break;
      case 2:
        if (!this.nominees.valid) {
          this.nominees.markAllAsTouched();
          return;
        }
        break;
      case 3:
        controlsToCheck = ['planType', 'tenure', 'premiumFrequency', 'insuredAmount', 'issuanceDate'];
        break;
    }

    if (controlsToCheck.length > 0) {
      const stepGroup = this.form;
      let valid = true;
      controlsToCheck.forEach(control => {
        const ctrl = stepGroup.get(control);
        if (ctrl && ctrl.invalid) {
          ctrl.markAsTouched();
          valid = false;
        }
      });

      if (!valid) return;
    }

    if (this.step < 3) {
      this.step++;
    } else {
      this.submitForm();
    }
  }

  previousStep() {
    if (this.step > 0) this.step--;
  }

  submitForm() {
    const formValue = this.form.value;

    const policyData = {
      ...formValue,
      policyStatus: 'ACTIVE',
      maturityDate: this.calculateMaturityDate(formValue.issuanceDate, formValue.tenure),
      premiumAmount: this.calculatePremium(+formValue.insuredAmount, formValue.premiumFrequency),
      maturityAmount: this.calculateMaturityAmount(+formValue.insuredAmount, formValue.planType, +formValue.tenure)
    };

    this.policyService.issuePolicy(Number(this.userId), policyData).subscribe(() => {
      alert('Policy Issued Successfully');
      this.router.navigate(['/']);
    });
  }

  calculateMaturityDate(startDate: string, tenure: number): string {
    const date = new Date(startDate);
    date.setFullYear(date.getFullYear() + Number(tenure));
    return date.toISOString().split('T')[0];
  }

  calculatePremium(amount: number, frequency: Frequency): number {
    const frequencyDivisor: Record<Frequency, number> = {
      Monthly: 12,
      Quarterly: 4,
      'Half-Yearly': 2,
      Yearly: 1
    };
    const divisor = frequencyDivisor[frequency] || 1;
    return +(amount / divisor).toFixed(2);
  }

  calculateMaturityAmount(amount: number, planType: string, tenure: number): number {
    const factor = planType === 'PREMIUM' ? 1.5 : 1.2;
    return +(amount * factor * tenure).toFixed(2);
  }
}
-----------------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { PolicyService } from '../services/policy.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  step = 0;
  form: FormGroup;
  userId = localStorage.getItem('userId') || '1';

  planTypes = ['BASIC', 'PREMIUM'];
  frequencies = ['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'];

  constructor(private fb: FormBuilder, private policyService: PolicyService, private router: Router) {
    this.form = this.fb.group({
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', Validators.required],
      incomeSource: ['', Validators.required],
      totalIncome: ['', [Validators.required, Validators.min(1)]],
      nominees: this.fb.array([]),
      planType: ['', Validators.required],
      tenure: ['', [Validators.required, Validators.min(1)]],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', [Validators.required, Validators.min(1)]],
      issuanceDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.addNominee();
  }

  get nominees() {
    return this.form.get('nominees') as FormArray;
  }

  addNominee() {
    this.nominees.push(this.fb.group({
      nomineeName: ['', Validators.required],
      contactNumber: ['', Validators.required],
      dob: ['', Validators.required],
      relationship: ['', Validators.required],
      percentageStake: ['', [Validators.required, Validators.min(1), Validators.max(100)]]
    }));
  }

  nextStep() {
    let valid = false;

    switch (this.step) {
      case 0:
        valid = this.form.get('policyHolderName')?.valid &&
                this.form.get('dob')?.valid &&
                this.form.get('address')?.valid &&
                this.form.get('mobileNumber')?.valid;
        break;
      case 1:
        valid = this.form.get('incomeSource')?.valid &&
                this.form.get('totalIncome')?.valid;
        break;
      case 2:
        valid = this.nominees.valid;
        break;
      case 3:
        valid = this.form.get('planType')?.valid &&
                this.form.get('tenure')?.valid &&
                this.form.get('premiumFrequency')?.valid &&
                this.form.get('insuredAmount')?.valid &&
                this.form.get('issuanceDate')?.valid;
        break;
    }

    if (valid) {
      if (this.step < 3) {
        this.step++;
      } else {
        this.submitForm();
      }
    } else {
      alert('Please fill all required fields before proceeding.');
      this.form.markAllAsTouched();
    }
  }

  previousStep() {
    if (this.step > 0) this.step--;
  }

  submitForm() {
    const formValue = this.form.value;
    const policyData = {
      ...formValue,
      policyStatus: 'ACTIVE',
      maturityDate: this.calculateMaturityDate(formValue.issuanceDate, formValue.tenure),
      premiumAmount: this.calculatePremium(formValue.insuredAmount, formValue.premiumFrequency),
      maturityAmount: this.calculateMaturityAmount(formValue.insuredAmount, formValue.planType, formValue.tenure)
    };

    this.policyService.issuePolicy(Number(this.userId), policyData).subscribe(() => {
      alert('Policy Issued Successfully');
      this.router.navigate(['/']);
    });
  }

  calculateMaturityDate(startDate: string, tenure: number): string {
    const date = new Date(startDate);
    date.setFullYear(date.getFullYear() + Number(tenure));
    return date.toISOString().split('T')[0];
  }

  calculatePremium(amount: number, frequency: string): number {
    const frequencyDivisor = { Monthly: 12, Quarterly: 4, 'Half-Yearly': 2, Yearly: 1 };
    return parseFloat((amount / frequencyDivisor[frequency]).toFixed(2));
  }

  calculateMaturityAmount(amount: number, planType: string, tenure: number): number {
    const factor = planType === 'PREMIUM' ? 1.5 : 1.2;
    return parseFloat((amount * factor * tenure).toFixed(2));
  }
}
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { PolicyService } from '../services/policy.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  step = 0;
  form: FormGroup;
  userId = localStorage.getItem('userId') || '1';

  planTypes = ['BASIC', 'PREMIUM'];
  frequencies = ['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'];

  constructor(private fb: FormBuilder, private policyService: PolicyService, private router: Router) {
    this.form = this.fb.group({
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', Validators.required],
      incomeSource: ['', Validators.required],
      totalIncome: ['', [Validators.required, Validators.min(1)]],
      nominees: this.fb.array([]),
      planType: ['', Validators.required],
      tenure: ['', [Validators.required, Validators.min(1)]],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', [Validators.required, Validators.min(1)]],
      issuanceDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.addNominee();
  }

  get nominees() {
    return this.form.get('nominees') as FormArray;
  }

  addNominee() {
    this.nominees.push(this.fb.group({
      nomineeName: ['', Validators.required],
      contactNumber: ['', Validators.required],
      dob: ['', Validators.required],
      relationship: ['', Validators.required],
      percentageStake: ['', [Validators.required, Validators.min(1), Validators.max(100)]]
    }));
  }

  nextStep() {
    let valid = false;

    switch (this.step) {
      case 0:
        valid = this.form.get('policyHolderName')?.valid &&
                this.form.get('dob')?.valid &&
                this.form.get('address')?.valid &&
                this.form.get('mobileNumber')?.valid;
        break;
      case 1:
        valid = this.form.get('incomeSource')?.valid &&
                this.form.get('totalIncome')?.valid;
        break;
      case 2:
        valid = this.nominees.valid;
        break;
      case 3:
        valid = this.form.get('planType')?.valid &&
                this.form.get('tenure')?.valid &&
                this.form.get('premiumFrequency')?.valid &&
                this.form.get('insuredAmount')?.valid &&
                this.form.get('issuanceDate')?.valid;
        break;
    }

    if (valid) {
      if (this.step < 3) {
        this.step++;
      } else {
        this.submitForm();
      }
    } else {
      alert('Please fill all required fields before proceeding.');
      this.form.markAllAsTouched();
    }
  }

  previousStep() {
    if (this.step > 0) this.step--;
  }

  submitForm() {
    const formValue = this.form.value;
    const policyData = {
      ...formValue,
      policyStatus: 'ACTIVE',
      maturityDate: this.calculateMaturityDate(formValue.issuanceDate, formValue.tenure),
      premiumAmount: this.calculatePremium(formValue.insuredAmount, formValue.premiumFrequency),
      maturityAmount: this.calculateMaturityAmount(formValue.insuredAmount, formValue.planType, formValue.tenure)
    };

    this.policyService.issuePolicy(Number(this.userId), policyData).subscribe(() => {
      alert('Policy Issued Successfully');
      this.router.navigate(['/']);
    });
  }

  calculateMaturityDate(startDate: string, tenure: number): string {
    const date = new Date(startDate);
    date.setFullYear(date.getFullYear() + Number(tenure));
    return date.toISOString().split('T')[0];
  }

  calculatePremium(amount: number, frequency: string): number {
    const frequencyDivisor = { Monthly: 12, Quarterly: 4, 'Half-Yearly': 2, Yearly: 1 };
    return parseFloat((amount / frequencyDivisor[frequency]).toFixed(2));
  }

  calculateMaturityAmount(amount: number, planType: string, tenure: number): number {
    const factor = planType === 'PREMIUM' ? 1.5 : 1.2;
    return parseFloat((amount * factor * tenure).toFixed(2));
  }
}
=--------------------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { PolicyService } from '../services/policy.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  step = 0;
  form: FormGroup;
  userId = localStorage.getItem('userId') || '1'; // default fallback

  planTypes = ['BASIC', 'PREMIUM'];
  frequencies = ['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'];

  constructor(private fb: FormBuilder, private policyService: PolicyService, private router: Router) {
    this.form = this.fb.group({
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', Validators.required],
      incomeSource: ['', Validators.required],
      totalIncome: ['', Validators.required],
      nominees: this.fb.array([]),
      planType: ['', Validators.required],
      tenure: ['', Validators.required],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', Validators.required],
      issuanceDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.addNominee();
  }

  get nominees() {
    return this.form.get('nominees') as FormArray;
  }

  addNominee() {
    this.nominees.push(this.fb.group({
      nomineeName: ['', Validators.required],
      contactNumber: ['', Validators.required],
      dob: ['', Validators.required],
      relationship: ['', Validators.required],
      percentageStake: ['', Validators.required]
    }));
  }

  nextStep() {
    if (this.step < 3) this.step++;
    else this.submitForm();
  }

  previousStep() {
    if (this.step > 0) this.step--;
  }

  submitForm() {
    const formValue = this.form.value;
    const policyData = {
      ...formValue,
      policyStatus: 'ACTIVE',
      maturityDate: this.calculateMaturityDate(formValue.issuanceDate, formValue.tenure),
      premiumAmount: this.calculatePremium(formValue.insuredAmount, formValue.premiumFrequency),
      maturityAmount: this.calculateMaturityAmount(formValue.insuredAmount, formValue.planType, formValue.tenure)
    };

    this.policyService.issuePolicy(Number(this.userId), policyData).subscribe(() => {
      alert('Policy Issued Successfully');
      this.router.navigate(['/']);
    });
  }

  calculateMaturityDate(startDate: string, tenure: number): string {
    const date = new Date(startDate);
    date.setFullYear(date.getFullYear() + Number(tenure));
    return date.toISOString().split('T')[0];
  }

  calculatePremium(amount: number, frequency: string): number {
    const frequencyDivisor = { Monthly: 12, Quarterly: 4, 'Half-Yearly': 2, Yearly: 1 };
    return +(amount / frequencyDivisor[frequency]).toFixed(2);
  }

  calculateMaturityAmount(amount: number, planType: string, tenure: number): number {
    const factor = planType === 'PREMIUM' ? 1.5 : 1.2;
    return +(amount * factor * tenure).toFixed(2);
  }
}

_______________________________________________________________________________________________________
<div class="container">
  <h2>Issue Policy - Step {{ step + 1 }}/4</h2>

  <form [formGroup]="form">
    <div *ngIf="step === 0">
      <h3>Personal Details</h3>
      <input type="text" formControlName="policyHolderName" placeholder="Full Name">
      <input type="date" formControlName="dob" placeholder="Date of Birth">
      <input type="text" formControlName="address" placeholder="Address">
      <input type="text" formControlName="mobileNumber" placeholder="Mobile Number">
    </div>

    <div *ngIf="step === 1">
      <h3>Income Details</h3>
      <input type="text" formControlName="incomeSource" placeholder="Income Source">
      <input type="number" formControlName="totalIncome" placeholder="Total Income">
    </div>

    <div *ngIf="step === 2">
      <h3>Nominee Details</h3>
      <div formArrayName="nominees">
        <div *ngFor="let nominee of nominees.controls; let i=index" [formGroupName]="i">
          <input type="text" formControlName="nomineeName" placeholder="Name">
          <input type="text" formControlName="contactNumber" placeholder="Contact No">
          <input type="date" formControlName="dob" placeholder="DOB">
          <input type="text" formControlName="relationship" placeholder="Relationship">
          <input type="number" formControlName="percentageStake" placeholder="Stake (%)">
        </div>
      </div>
      <button type="button" (click)="addNominee()">+ Add Another Nominee</button>
    </div>

    <div *ngIf="step === 3">
      <h3>Policy Details</h3>
      <select formControlName="planType">
        <option value="">Select Plan</option>
        <option *ngFor="let type of planTypes" [value]="type">{{ type }}</option>
      </select>
      <input type="number" formControlName="tenure" placeholder="Tenure (years)">
      <select formControlName="premiumFrequency">
        <option value="">Frequency</option>
        <option *ngFor="let f of frequencies" [value]="f">{{ f }}</option>
      </select>
      <input type="number" formControlName="insuredAmount" placeholder="Insured Amount">
      <input type="date" formControlName="issuanceDate" placeholder="Issuance Date">
    </div>

    <div class="navigation-buttons">
      <button type="button" (click)="previousStep()" *ngIf="step > 0">Previous</button>
      <button type="button" (click)="nextStep()">{{ step < 3 ? 'Next' : 'Submit' }}</button>
    </div>
  </form>
</div>
____________________________________________________________________________________________

.container {
  max-width: 700px;
  margin: auto;
  background: #f7f7f7;
  padding: 25px;
  border-radius: 10px;
}

input, select {
  width: 100%;
  padding: 10px;
  margin: 8px 0;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.navigation-buttons {
  margin-top: 20px;
  display: flex;
  justify-content: space-between;
}

button {
  padding: 10px 20px;
  border: none;
  background-color: #0d6efd;
  color: white;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #084298;
}
___________________________________________________________________________________

nextStep() {
  let valid = false;

  switch (this.step) {
    case 0: // Personal Details
      valid = this.form.get('policyHolderName')?.valid &&
              this.form.get('dob')?.valid &&
              this.form.get('address')?.valid &&
              this.form.get('mobileNumber')?.valid;
      break;
    case 1: // Income Details
      valid = this.form.get('incomeSource')?.valid &&
              this.form.get('totalIncome')?.valid;
      break;
    case 2: // Nominee Details
      valid = this.nominees.valid;
      break;
    case 3: // Policy Details
      valid = this.form.get('planType')?.valid &&
              this.form.get('tenure')?.valid &&
              this.form.get('premiumFrequency')?.valid &&
              this.form.get('insuredAmount')?.valid &&
              this.form.get('issuanceDate')?.valid;
      break;
  }

  if (valid) {
    if (this.step < 3) {
      this.step++;
    } else {
      this.submitForm();
    }
  } else {
    alert('Please fill in all required fields before proceeding.');
    this.form.markAllAsTouched(); // show errors if any
  }
}
_____________________________________________________________


// ===================== app-routing.module.ts =====================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { IssuePolicyComponent } from './issue-policy/issue-policy.component';
import { LoginComponent } from './login/login.component';

const routes: Routes = [
  { path: '', component: LoginComponent },
  { path: 'issue-policy', component: IssuePolicyComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


// ===================== app.module.ts =====================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './login/login.component';
import { IssuePolicyComponent } from './issue-policy/issue-policy.component';
import { PolicyService } from './services/policy.service';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { StepsModule } from 'primeng/steps';
import { InputTextModule } from 'primeng/inputtext';
import { CalendarModule } from 'primeng/calendar';
import { DropdownModule } from 'primeng/dropdown';
import { ButtonModule } from 'primeng/button';
import { TableModule } from 'primeng/table';
import { MessageModule } from 'primeng/message';
import { MessagesModule } from 'primeng/messages';

@NgModule({
  declarations: [AppComponent, LoginComponent, IssuePolicyComponent],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule,
    HttpClientModule,
    BrowserAnimationsModule,
    StepsModule,
    InputTextModule,
    CalendarModule,
    DropdownModule,
    ButtonModule,
    TableModule,
    MessageModule,
    MessagesModule
  ],
  providers: [PolicyService],
  bootstrap: [AppComponent]
})
export class AppModule {}


// ===================== services/policy.service.ts =====================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class PolicyService {
  private baseUrl = 'http://localhost:8080/policy';

  constructor(private http: HttpClient) {}

  issuePolicy(userId: number, data: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/issue/${userId}`, data);
  }

  getPolicies(): Observable<any> {
    return this.http.get(`${this.baseUrl}/`);
  }
}


// ===================== issue-policy.component.ts =====================
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { PolicyService } from '../services/policy.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent implements OnInit {
  step = 0;
  form: FormGroup;
  userId = localStorage.getItem('userId') || '1'; // assuming userId is stored after login

  planTypes = ['BASIC', 'PREMIUM'];
  frequencies = ['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly'];

  constructor(private fb: FormBuilder, private policyService: PolicyService, private router: Router) {
    this.form = this.fb.group({
      policyHolderName: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', Validators.required],
      incomeSource: ['', Validators.required],
      totalIncome: ['', [Validators.required, Validators.min(1)]],
      nominees: this.fb.array([]),
      planType: ['', Validators.required],
      tenure: ['', Validators.required],
      premiumFrequency: ['', Validators.required],
      insuredAmount: ['', Validators.required],
      issuanceDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.addNominee();
  }

  get nominees() {
    return this.form.get('nominees') as FormArray;
  }

  addNominee() {
    this.nominees.push(this.fb.group({
      nomineeName: ['', Validators.required],
      contactNumber: ['', Validators.required],
      dob: ['', Validators.required],
      relationship: ['', Validators.required],
      percentageStake: ['', Validators.required]
    }));
  }

  nextStep() {
    if (this.form.valid) {
      if (this.step < 3) this.step++;
      else this.submitForm();
    }
  }

  previousStep() {
    if (this.step > 0) this.step--;
  }

  submitForm() {
    const formValue = this.form.value;
    const policyData = {
      ...formValue,
      policyStatus: 'ACTIVE',
      maturityDate: this.calculateMaturityDate(formValue.issuanceDate, formValue.tenure),
      premiumAmount: this.calculatePremium(formValue.insuredAmount, formValue.premiumFrequency),
      maturityAmount: this.calculateMaturityAmount(formValue.insuredAmount, formValue.planType, formValue.tenure)
    };

    this.policyService.issuePolicy(Number(this.userId), policyData).subscribe(() => {
      alert('Policy Issued Successfully');
      this.router.navigate(['/']);
    });
  }

  calculateMaturityDate(startDate: string, tenure: number): string {
    const date = new Date(startDate);
    date.setFullYear(date.getFullYear() + Number(tenure));
    return date.toISOString().split('T')[0];
  }

  calculatePremium(amount: number, frequency: string): number {
    const frequencyDivisor = { Monthly: 12, Quarterly: 4, 'Half-Yearly': 2, Yearly: 1 };
    return (amount / frequencyDivisor[frequency]).toFixed(2);
  }

  calculateMaturityAmount(amount: number, planType: string, tenure: number): number {
    const factor = planType === 'PREMIUM' ? 1.5 : 1.2;
    return (amount * factor * tenure).toFixed(2);
  }
}


// ===================== issue-policy.component.html =====================
<div class="step-container">
  <p-steps [model]="[{label: 'Personal'}, {label: 'Income'}, {label: 'Nominee'}, {label: 'Policy'}]" [activeIndex]="step"></p-steps>

  <form [formGroup]="form">
    <div *ngIf="step === 0">
      <h3>Personal Details</h3>
      <input pInputText formControlName="policyHolderName" placeholder="Full Name" />
      <input pInputText type="date" formControlName="dob" placeholder="Date of Birth" />
      <input pInputText formControlName="address" placeholder="Address" />
      <input pInputText formControlName="mobileNumber" placeholder="Mobile Number" />
    </div>

    <div *ngIf="step === 1">
      <h3>Income Details</h3>
      <input pInputText formControlName="incomeSource" placeholder="Income Source" />
      <input pInputText type="number" formControlName="totalIncome" placeholder="Total Income" />
    </div>

    <div *ngIf="step === 2">
      <h3>Nominee Details</h3>
      <div formArrayName="nominees">
        <div *ngFor="let nominee of nominees.controls; let i=index" [formGroupName]="i">
          <input pInputText formControlName="nomineeName" placeholder="Nominee Name" />
          <input pInputText formControlName="contactNumber" placeholder="Contact No" />
          <input pInputText type="date" formControlName="dob" placeholder="DOB" />
          <input pInputText formControlName="relationship" placeholder="Relationship" />
          <input pInputText type="number" formControlName="percentageStake" placeholder="Stake (%)" />
        </div>
      </div>
      <button pButton type="button" (click)="addNominee()" label="Add Nominee"></button>
    </div>

    <div *ngIf="step === 3">
      <h3>Policy Details</h3>
      <select formControlName="planType">
        <option *ngFor="let plan of planTypes" [value]="plan">{{ plan }}</option>
      </select>
      <input pInputText formControlName="tenure" placeholder="Tenure (years)" />
      <select formControlName="premiumFrequency">
        <option *ngFor="let freq of frequencies" [value]="freq">{{ freq }}</option>
      </select>
      <input pInputText formControlName="insuredAmount" placeholder="Insured Amount" />
      <input pInputText type="date" formControlName="issuanceDate" placeholder="Issuance Date" />
    </div>

    <div class="actions">
      <button pButton type="button" (click)="previousStep()" label="Previous" *ngIf="step > 0"></button>
      <button pButton type="button" (click)="nextStep()" label="{{ step < 3 ? 'Next' : 'Submit' }}"></button>
    </div>
  </form>
</div>


// ===================== issue-policy.component.css =====================
.step-container {
  width: 80%;
  margin: 0 auto;
  padding: 20px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  border-radius: 8px;
}

input, select {
  display: block;
  width: 100%;
  margin: 10px 0;
  padding: 10px;
  border-radius: 6px;
  border: 1px solid #ccc;
}

.actions {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}


-------------------------------------------------------------------------------------------------------------------
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:8080/users';

  constructor(private http: HttpClient) {}

  login(user: any): Observable<any> {
    return this.http.post(`${this.apiUrl}/login`, user);
  }

  getUserRole(): string | null {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user).role : null;
  }

  isLoggedIn(): boolean {
    return !!localStorage.getItem('user');
  }

  logout(): void {
    localStorage.removeItem('user');
  }
}
authservice

_______________________
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../auth/auth.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  role: string | null = '';

  constructor(private authService: AuthService, private router: Router) {}

  ngOnInit(): void {
    this.role = this.authService.getUserRole();
    if (!this.role) {
      this.router.navigate(['/login']);
    }
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}
____________________

<div class="dashboard-container">
  <h2>Welcome to Dashboard</h2>
  <button routerLink="/issue-policy">Issue Policy</button>
  <button routerLink="/apply-claim">Apply Claim</button>
  <button *ngIf="role === 'ADMIN'" routerLink="/approve-claim">Approve Claim</button>
  <button (click)="logout()">Logout</button>
</div>
______________

.dashboard-container {
  text-align: center;
  margin-top: 50px;
}

button {
  margin: 10px;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
}
______________

import { Component } from '@angular/core';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent {
  step = 1;

  nextStep(): void {
    if (this.step < 4) this.step++;
  }

  prevStep(): void {
    if (this.step > 1) this.step--;
  }
}

________________

<div class="policy-container">
  <app-personal-details *ngIf="step === 1"></app-personal-details>
  <app-income-details *ngIf="step === 2"></app-income-details>
  <app-nominee-details *ngIf="step === 3"></app-nominee-details>
  <app-policy-details *ngIf="step === 4"></app-policy-details>

  <div class="buttons">
    <button *ngIf="step > 1" (click)="prevStep()">Previous</button>
    <button *ngIf="step < 4" (click)="nextStep()">Next</button>
    <button *ngIf="step === 4">Submit</button>
  </div>
</div>
________________

.policy-container {
  text-align: center;
  margin-top: 50px;
}

.buttons {
  margin-top: 20px;
}
_______________

import { Component } from '@angular/core';

@Component({
  selector: 'app-personal-details',
  templateUrl: './personal-details.component.html',
})
export class PersonalDetailsComponent {}
____________________

<h3>Step 1: Personal Details</h3>
<form>
  <label>Name:</label>
  <input type="text" required />

  <label>DOB:</label>
  <input type="date" required />

  <label>Address:</label>
  <input type="text" required />
</form>
_____________________________

import { Component } from '@angular/core';

@Component({
  selector: 'app-income-details',
  templateUrl: './income-details.component.html',
})
export class IncomeDetailsComponent {}
___________________

<h3>Step 2: Income Details</h3>
<form>
  <label>Income Source:</label>
  <input type="text" required />

  <label>Total Income:</label>
  <input type="number" required />
</form>
__________________

import { Component } from '@angular/core';

@Component({
  selector: 'app-nominee-details',
  templateUrl: './nominee-details.component.html',
})
export class NomineeDetailsComponent {}
__________________________________

<h3>Step 3: Nominee Details</h3>
<form>
  <label>Nominee Name:</label>
  <input type="text" required />

  <label>Contact No:</label>
  <input type="text" required />

  <label>DOB:</label>
  <input type="date" required />

  <label>Relationship:</label>
  <input type="text" required />

  <label>Percentage Stake:</label>
  <input type="number" required />
</form>

_________________________


import { Component } from '@angular/core';

@Component({
  selector: 'app-policy-details',
  templateUrl: './policy-details.component.html',
})
export class PolicyDetailsComponent {}
______________


<h3>Step 4: Policy Details</h3>
<form>
  <label>Plan Name:</label>
  <input type="text" required />

  <label>Plan Type:</label>
  <input type="text" required />

  <label>Tenure:</label>
  <input type="number" required />

  <label>Premium Frequency:</label>
  <input type="text" required />

  <label>Insured Amount:</label>
  <input type="number" required />

  <label>Issuance Date:</label>
  <input type="date" required />
</form>
______________

LOGIN.CSS
body {
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(to right, #74ebd5, #acb6e5);
}

.container {
  display: flex;
  width: 600px;
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

.register-box, .login-box {
  flex: 1;
  padding: 20px;
  text-align: center;
}

.register-box {
  background: #f8f9fa;
  border-radius: 10px 0 0 10px;
}

.register-box h2 {
  color: #333;
}

.register-btn {
  display: inline-block;
  margin-top: 10px;
  padding: 10px 15px;
  color: white;
  background: #007bff;
  text-decoration: none;
  border-radius: 5px;
}

.login-box h2 {
  color: #333;
}

input {
  width: 80%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 5px;
}

button {
  width: 80%;
  padding: 10px;
  background: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background: #218838;
}
___________________

REGISTER.TS

import { Component } from '@angular/core';
import { AuthService } from '../auth.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  user = { username: '', password: '', role: '' };

  constructor(private authService: AuthService) {}

  register() {
    this.authService.register(this.user).subscribe(
      response => {
        alert('Registration Successful!');
      },
      error => {
        alert('Registration Failed!');
      }
    );
  }
}
_______________________

REGISTER.HTML
<div class="container">
  <div class="register-box">
    <h2>Create an Account</h2>
    <form (submit)="register()">
      <input type="text" placeholder="Username" [(ngModel)]="user.username" required />
      <input type="password" placeholder="Password" [(ngModel)]="user.password" required />
      <input type="text" placeholder="Role (User/Admin)" [(ngModel)]="user.role" required />
      <button type="submit">Register</button>
    </form>
  </div>

  <div class="login-box">
    <h2>Already Registered?</h2>
    <p>Sign in now and explore the app.</p>
    <a href="/login" class="login-btn">Login</a>
  </div>
</div>

_______________

REGISTER>CSS
.container {
  display: flex;
  width: 600px;
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

.register-box, .login-box {
  flex: 1;
  padding: 20px;
  text-align: center;
}

.register-box h2, .login-box h2 {
  color: #333;
}

input {
  width: 80%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 5px;
}

button {
  width: 80%;
  padding: 10px;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background: #0056b3;
}

.login-btn {
  display: inline-block;
  margin-top: 10px;
  padding: 10px 15px;
  color: white;
  background: #28a745;
  text-decoration: none;
  border-radius: 5px;
}

.login-btn:hover {
  background: #218838;
}
_________________________

css policy issue

/* Container */
.policy-container {
  max-width: 700px;
  margin: 40px auto;
  padding: 20px 30px;
  background-color: #ffffff;
  border-radius: 20px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  font-family: 'Segoe UI', sans-serif;
}

/* Stepper at top */
.step-indicator {
  display: flex;
  justify-content: space-between;
  margin-bottom: 30px;
  position: relative;
}

.step {
  flex: 1;
  text-align: center;
  font-size: 14px;
  color: #999;
  position: relative;
}

.step.active {
  font-weight: bold;
  color: #2c7be5;
}

.step::before {
  content: "";
  display: block;
  margin: 0 auto 10px auto;
  width: 24px;
  height: 24px;
  background-color: #ddd;
  border-radius: 50%;
}

.step.active::before {
  background-color: #2c7be5;
}

/* Horizontal line between steps */
.step-indicator::after {
  content: "";
  position: absolute;
  top: 11px;
  left: 0;
  right: 0;
  height: 2px;
  background-color: #eee;
  z-index: -1;
}

/* Form fields */
form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

label {
  font-weight: 500;
  margin-bottom: 4px;
}

input,
select {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 10px;
  font-size: 15px;
}

input:invalid {
  border-color: #e74c3c;
}

.error-message {
  color: #e74c3c;
  font-size: 13px;
  margin-top: -10px;
}

/* Buttons */
.buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 30px;
}

button {
  background-color: #2c7be5;
  color: white;
  padding: 10px 25px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 15px;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #1a64c4;
}

button[disabled] {
  background-color: #ccc;
  cursor: not-allowed;
}
______________________________________________________________

issue-policy.html

<div class="policy-container">

  <!-- Step Indicator -->
  <div class="step-indicator">
    <div class="step" [class.active]="step === 1">Personal</div>
    <div class="step" [class.active]="step === 2">Income</div>
    <div class="step" [class.active]="step === 3">Nominee</div>
    <div class="step" [class.active]="step === 4">Policy</div>
  </div>

  <!-- Step Components -->
  <app-personal-details *ngIf="step === 1"></app-personal-details>
  <app-income-details *ngIf="step === 2"></app-income-details>
  <app-nominee-details *ngIf="step === 3"></app-nominee-details>
  <app-policy-details *ngIf="step === 4"></app-policy-details>

  <!-- Navigation Buttons -->
  <div class="buttons">
    <button *ngIf="step > 1" (click)="prevStep()">Previous</button>
    <button *ngIf="step < 4" (click)="nextStep()">Next</button>
    <button *ngIf="step === 4" (click)="submit()">Submit</button>
  </div>

</div>

_______________________________________

// issue-policy.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-issue-policy',
  templateUrl: './issue-policy.component.html',
  styleUrls: ['./issue-policy.component.css']
})
export class IssuePolicyComponent {
  step: number = 1;
  isStepValid: boolean = false;

  nextStep() {
    if (this.isStepValid && this.step < 4) {
      this.step++;
      this.isStepValid = false;
    }
  }

  prevStep() {
    if (this.step > 1) {
      this.step--;
      this.isStepValid = true;
    }
  }

  onStepValidityChanged(valid: boolean) {
    this.isStepValid = valid;
  }

  submitPolicy() {
    console.log('Policy submitted!');
  }
}

// issue-policy.component.html
<div class="policy-container">
  <app-personal-details
    *ngIf="step === 1"
    (formValidityChanged)="onStepValidityChanged($event)">
  </app-personal-details>

  <app-income-details
    *ngIf="step === 2"
    (formValidityChanged)="onStepValidityChanged($event)">
  </app-income-details>

  <app-nominee-details
    *ngIf="step === 3"
    (formValidityChanged)="onStepValidityChanged($event)">
  </app-nominee-details>

  <app-policy-details
    *ngIf="step === 4"
    (formValidityChanged)="onStepValidityChanged($event)">
  </app-policy-details>

  <div class="buttons">
    <button *ngIf="step > 1" (click)="prevStep()">Previous</button>
    <button *ngIf="step < 4" [disabled]="!isStepValid" (click)="nextStep()">Next</button>
    <button *ngIf="step === 4" [disabled]="!isStepValid" (click)="submitPolicy()">Submit</button>
  </div>
</div>

// personal-details.component.ts
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-personal-details',
  templateUrl: './personal-details.component.html',
  styleUrls: ['./personal-details.component.css']
})
export class PersonalDetailsComponent implements OnInit {
  personalForm!: FormGroup;

  @Output() formValidityChanged = new EventEmitter<boolean>();

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.personalForm = this.fb.group({
      name: ['', Validators.required],
      dob: ['', Validators.required],
      address: ['', Validators.required],
      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]
    });

    this.personalForm.statusChanges.subscribe(() => {
      this.formValidityChanged.emit(this.personalForm.valid);
    });
  }
}

// personal-details.component.html
<form [formGroup]="personalForm">
  <div class="form-group">
    <label>Name</label>
    <input formControlName="name" type="text" />
    <div class="error" *ngIf="personalForm.get('name')?.invalid && personalForm.get('name')?.touched">
      Name is required.
    </div>
  </div>

  <div class="form-group">
    <label>Date of Birth</label>
    <input formControlName="dob" type="date" />
    <div class="error" *ngIf="personalForm.get('dob')?.invalid && personalForm.get('dob')?.touched">
      Date of Birth is required.
    </div>
  </div>

  <div class="form-group">
    <label>Address</label>
    <input formControlName="address" type="text" />
    <div class="error" *ngIf="personalForm.get('address')?.invalid && personalForm.get('address')?.touched">
      Address is required.
    </div>
  </div>

  <div class="form-group">
    <label>Mobile Number</label>
    <input formControlName="mobileNumber" type="text" />
    <div class="error" *ngIf="personalForm.get('mobileNumber')?.invalid && personalForm.get('mobileNumber')?.touched">
      Mobile Number must be 10 digits.
    </div>
  </div>
</form>

// personal-details.component.css
.form-group {
  margin-bottom: 15px;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  box-sizing: border-box;
}

.error {
  color: red;
  font-size: 12px;
}

.buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

