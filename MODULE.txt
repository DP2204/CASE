import com.bnpparibas.dpw.entity.ExtTrackAndTraceMappingEntity;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface ExtTrackAndTraceMappingRepository extends DpwAppRepository<ExtTrackAndTraceMappingEntity, Long> {

    @Query("SELECT e FROM ExtTrackAndTraceMappingEntity e " +
           "WHERE e.branchCode = :branchCode " +
           "AND e.countryCode = :countryCode " +
           "AND e.pgpeCode = :pgpeCode " +
           "AND e.action = :action " +
           "AND UPPER(e.statusCst) = UPPER(:statusCst) " +
           "AND (:statusCxt IS NULL OR e.statusCxt = :statusCxt) " +
           "AND (:prodCode IS NULL OR e.productCode = :prodCode)")
    List<ExtTrackAndTraceMappingEntity> findMatchingMappings(
        @Param("branchCode") String branchCode,
        @Param("countryCode") String countryCode,
        @Param("pgpeCode") String pgpeCode,
        @Param("action") String action,
        @Param("statusCst") String statusCst,
        @Param("statusCxt") String statusCxt,
        @Param("prodCode") String prodCode
    );
}













@Query("SELECT e FROM ExtTrackAndTraceMappingEntity e " +
       "WHERE e.branchCode = :branchCode " +
       "AND e.countryCode = :countryCode " +
       "AND e.pgpeCode = :pgpeCode " +
       "AND e.action = :action " +
       "AND UPPER(e.statusCst) = UPPER(:statusCst) " +
       "AND (:statusCxt IS NULL OR e.statusCxt = :statusCxt) " +
       "AND (:prodCode IS NULL OR e.productCode = :prodCode)")
List<ExtTrackAndTraceMappingEntity> findMappings(
    @Param("branchCode") String branchCode,
    @Param("countryCode") String countryCode,
    @Param("pgpeCode") String pgpeCode,
    @Param("action") String action,
    @Param("statusCst") String statusCst,
    @Param("statusCxt") String statusCxt,
    @Param("prodCode") String prodCode
);




!!!!!!!!!!!!!!!!!!!// ExtTrackAndTraceMappingServiceImplTest.java

import static org.junit.jupiter.api.Assertions.; import static org.mockito.BDDMockito.;

import com.bnpparibas.dpw.entity.ExtTrackAndTraceMappingEntity; import com.bnpparibas.dpw.repository.ExtTrackAndTraceMappingRepository; import com.bnpparibas.dpw.service.impl.ExtTrackAndTraceMappingServiceImpl; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

@ExtendWith(MockitoExtension.class) public class ExtTrackAndTraceMappingServiceImplTest {

@Mock
private ExtTrackAndTraceMappingRepository repository;

@InjectMocks
private ExtTrackAndTraceMappingServiceImpl service;

private ExtTrackAndTraceMappingEntity entity;

@BeforeEach
public void setup() {
    entity = new ExtTrackAndTraceMappingEntity();
    entity.setId(3L);
    entity.setBranchCode("30004");
    entity.setCountryCode("FR");
    entity.setPgpeCode("ILCI");
    entity.setAction("Validated");
    entity.setStatusCst("Active");
    entity.setStatusCxt("AC");
    entity.setProductCode("IC");
    entity.setTransactionTypeCode("TTC");
}

@Test
public void testGetMapping_Found() {
    given(repository.findByBranchCodeAndCountryCodeAndPgpeCodeAndActionAndStatusCst(
            "30004", "FR", "ILCI", "Validated", "Active"))
            .willReturn(entity);

    Optional<ExtTrackAndTraceMappingEntity> result = service.getMapping("30004", "FR", "ILCI", "Validated", "Active");

    assertTrue(result.isPresent());
    ExtTrackAndTraceMappingEntity actual = result.get();

    // Mandatory fields not null
    assertNotNull(actual.getBranchCode());
    assertNotNull(actual.getCountryCode());
    assertNotNull(actual.getPgpeCode());
    assertNotNull(actual.getAction());
    assertNotNull(actual.getStatusCst());

    // All fields value check
    assertEquals("30004", actual.getBranchCode());
    assertEquals("FR", actual.getCountryCode());
    assertEquals("ILCI", actual.getPgpeCode());
    assertEquals("Validated", actual.getAction());
    assertEquals("Active", actual.getStatusCst());
    assertEquals("AC", actual.getStatusCxt());
    assertEquals("IC", actual.getProductCode());
    assertEquals("TTC", actual.getTransactionTypeCode());
}

@Test
public void testGetMapping_NotFound() {
    given(repository.findByBranchCodeAndCountryCodeAndPgpeCodeAndActionAndStatusCst(
            "30004", "FR", "ILCI", "Validated", "Active"))
            .willReturn(null);

    Optional<ExtTrackAndTraceMappingEntity> result = service.getMapping("30004", "FR", "ILCI", "Validated", "Active");

    assertTrue(result.isEmpty());
}

}



--------------

package com.bnpparibas.dpw.service;

import com.bnpparibas.dpw.entity.ExtTrackAndTraceMappingEntity;
import com.bnpparibas.dpw.service.impl.ExtTrackAndTraceMappingServiceImpl;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class ExtTrackAndTraceMappingServiceTest {

    @Mock
    private ExtTrackAndTraceMappingService service;

    @Test
    public void testGetMappingReturnsExpectedEntity() {
        ExtTrackAndTraceMappingEntity expectedEntity = new ExtTrackAndTraceMappingEntity();
        expectedEntity.setBranchCode("30004");
        expectedEntity.setCountryCode("FR");
        expectedEntity.setPgpeCode("ILCI");
        expectedEntity.setAction("Validated");
        expectedEntity.setStatusCst("Active");

        when(service.getMapping("30004", "FR", "ILCI", "Validated", "Active"))
            .thenReturn(Optional.of(expectedEntity));

        Optional<ExtTrackAndTraceMappingEntity> actual = service.getMapping("30004", "FR", "ILCI", "Validated", "Active");

        assertEquals(expectedEntity.getBranchCode(), actual.get().getBranchCode());
    }
}













--------------------------

INSERT INTO DPW_EXT_TRACK_TRACE_MAPPING (
    ID, BRANCH_CODE, COUNTRY_CODE, PGPE_CODE, ACTION, STATUS_CST, STATUS_CXT, PROD_CODE, TRANSACTION_TYPE_CODE
) VALUES (
    1, '3000', 'FR', 'ILCI', 'Validated', 'Active', 'AC', 'IC', 'T1'
);

INSERT INTO DPW_EXT_TRACK_TRACE_MAPPING (
    ID, BRANCH_CODE, COUNTRY_CODE, PGPE_CODE, ACTION, STATUS_CST, STATUS_CXT, PROD_CODE, TRANSACTION_TYPE_CODE
) VALUES (
    2, '3001', 'IN', 'ILCI', 'Rejected', 'Inactive', 'IN', 'IC', 'T2'
);

INSERT INTO DPW_EXT_TRACK_TRACE_MAPPING (
    ID, BRANCH_CODE, COUNTRY_CODE, PGPE_CODE, ACTION, STATUS_CST, STATUS_CXT, PROD_CODE, TRANSACTION_TYPE_CODE
) VALUES (
    3, '3002', 'US', 'ILC2', 'Pending', 'OnHold', 'OH', NULL, NULL
);





// models/claim.model.ts
import { Policy } from './policy.model';

export interface Claim {
  id: number;
  claimAmount: number;
  claimType: string;
  status: string;
  policy: Policy;
}

___________________________________________________________________________________________________

// models/policy.model.ts
export interface Policy {
  policyHolderName: string;
  planType: string;
  insuredAmount: number;
  tenure: number;
  premiumFrequency: string;
  policyStatus: string;
}

__________________________________________________________________________________________________________
// approve-claim.component.ts
import { Component, OnInit } from '@angular/core';
import { ClaimService } from '../authservice/claim.service';
import { Router } from '@angular/router';
import { Claim } from '../models/claim.model';

@Component({
  selector: 'app-approve-claim',
  templateUrl: './claim-approval.component.html',
  styleUrls: ['./claim-approval.component.css']
})
export class ApproveClaimComponent implements OnInit {
  pendingClaims: Claim[] = [];
  errorMessage: string = "";

  constructor(private claimService: ClaimService, private router: Router) {}

  ngOnInit(): void {
    this.fetchPendingClaims();
  }

  fetchPendingClaims(): void {
    this.claimService.getClaimsForApproval().subscribe({
      next: claims => this.pendingClaims = claims,
      error: err => this.errorMessage = 'Error loading pending claims'
    });
  }

  approveClaim(claimId: number): void {
    this.claimService.approveClaim(claimId).subscribe({
      next: () => this.fetchPendingClaims(),
      error: err => console.error('Error approving claim', err)
    });
  }

  rejectClaim(claimId: number): void {
    this.claimService.rejectClaim(claimId).subscribe({
      next: () => this.fetchPendingClaims(),
      error: err => console.error('Error rejecting claim', err)
    });
  }
}
_____________________________________________________________________________________________________________________

<div class="approve-container">
  <h2>Pending Claims for Approval</h2>

  <div *ngIf="errorMessage" class="error">{{ errorMessage }}</div>

  <table *ngIf="pendingClaims.length > 0" class="claim-table">
    <thead>
      <tr>
        <th>Claim ID</th>
        <th>Claim Amount</th>
        <th>Type</th>
        <th>Status</th>
        <th>Policy Details</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let claim of pendingClaims">
        <td>{{ claim.id }}</td>
        <td>{{ claim.claimAmount }}</td>
        <td>{{ claim.claimType }}</td>
        <td>{{ claim.status }}</td>
        <td>
          <div *ngIf="claim.policy">
            <p><strong>Holder Name:</strong> {{ claim.policy.policyHolderName }}</p>
            <p><strong>Plan Type:</strong> {{ claim.policy.planType }}</p>
            <p><strong>Insured Amount:</strong> â‚¹{{ claim.policy.insuredAmount }}</p>
            <p><strong>Tenure:</strong> {{ claim.policy.tenure }} years</p>
            <p><strong>Premium Frequency:</strong> {{ claim.policy.premiumFrequency }}</p>
            <p><strong>Status:</strong> {{ claim.policy.policyStatus }}</p>
          </div>
        </td>
        <td>
          <button (click)="approveClaim(claim.id)" class="btn-approve">Approve</button>
          <button (click)="rejectClaim(claim.id)" class="btn-reject">Reject</button>
        </td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="pendingClaims.length === 0">No pending claims to display.</div>
</div>
_________________________________________________________________________________________________________

@Configuration
public class OrikaMapperConfig {

    @Bean
    public MapperFactory mapperFactory() {
        MapperFactory factory = new DefaultMapperFactory.Builder().build();
        factory.classMap(User.class, UserDTO.class)
                .byDefault()
                .register();
        return factory;
    }

    @Bean
    public MapperFacade mapperFacade(MapperFactory mapperFactory) {
        return mapperFactory.getMapperFacade();
    }
}
____________________________________________________________________________________________________________________

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final MapperFacade mapper;

    @Override
    public UserDTO createUser(UserDTO userDTO){
        User user = mapper.map(userDTO, User.class);
        return mapper.map(userRepository.save(user), UserDTO.class);
    }

    @Override
    public UserDTO getUserById(Long id) {
        User user = userRepository.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
        return mapper.map(user, UserDTO.class);
    }

    @Override
    public UserDTO updateUser(Long id, UserDTO userDTO) {
        User existingUser = userRepository.findById(id).orElseThrow(() -> new RuntimeException("User not found"));

        existingUser.setUsername(userDTO.getUsername());
        existingUser.setPassword(userDTO.getPassword());
        existingUser.setRole(userDTO.getRole());

        return mapper.map(userRepository.save(existingUser), UserDTO.class);
    }

    @Override
    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }

    @Override
    public List<UserDTO> getAllUsers() {
        return userRepository.findAll()
                .stream()
                .map(user -> mapper.map(user, UserDTO.class))
                .collect(Collectors.toList());
    }

    @Override
    public UserDTO validateUser(String username, String password) {
        Optional<User> userOpt = userRepository.findByUsernameAndPassword(username, password);
        return userOpt.map(user -> mapper.map(user, UserDTO.class)).orElse(null);
    }
}
__________________________________________________________________________________

public interface UserService {

    UserDTO createUser(UserDTO userDTO);

    UserDTO getUserById(Long id);

    UserDTO updateUser(Long id, UserDTO userDTO);

    void deleteUser(Long id);

    List<UserDTO> getAllUsers();

    UserDTO validateUser(String username, String password);
}


----------------------------------------------------------------------------------------------------------------------------------

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping("/login")
    public ResponseEntity<?> loginUser(@RequestBody UserDTO userDTO) {
        UserDTO user = userService.validateUser(userDTO.getUsername(), userDTO.getPassword());
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }
    }

    @PostMapping("/register")
    public ResponseEntity<UserDTO> createUser(@RequestBody UserDTO userDTO) {
        return ResponseEntity.ok(userService.createUser(userDTO));
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserDTO> getUserById(@PathVariable Long id) {
        return ResponseEntity.ok(userService.getUserById(id));
    }

    @GetMapping("/")
    public ResponseEntity<List<UserDTO>> getAllUsers() {
        return ResponseEntity.ok(userService.getAllUsers());
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserDTO> updateUser(@PathVariable long id, @RequestBody UserDTO userDTO) {
        return ResponseEntity.ok(userService.updateUser(id, userDTO));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable long id) {
        userService.deleteUser(id);
        return ResponseEntity.ok().build();
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++











